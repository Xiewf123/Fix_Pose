#include <ros/ros.h>  
#include <move_base_msgs/MoveBaseAction.h>  
#include <actionlib/client/simple_action_client.h>  
#include "geometry_msgs/PoseWithCovarianceStamped.h"     
#include "std_msgs/String.h"
#include <iostream>
#include "sys/stat.h"
#include <ros/ros.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <ctime>
#include <string>
#include <boost/thread.hpp>

using namespace std;

typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;  

#define GOHOME "HOME"
#define GODRAMING "DRAMING"

bool Callback_flag = false;
string msg_str = "";
bool start_goal = false;
bool achieve_goal = false;
bool going_goal_1 = false;

/*******************************默认amcl初始点******************************************/
typedef struct _POSE
{
  double X;
  double Y;
  double Z;
  double or_x;
  double or_y;
  double or_z;
  double or_w;
} POSE;

POSE pose1 = {1.157, -1.220, 0.000,  0.000, 0.000, 0.692, 1.528};
POSE pose2 = {-0.122, 0.032, 0.000,  0.000, 0.000, 0.567, 0.824};
POSE pose3 = {-1.489, 1.853, 0.000,  0.000, 0.000, -0.090, 0.996};
POSE pose4 = {0.0, 0.0, 0.0,  0.0, 0.0, 0.0, 0.0};

void setHome( ros::Publisher pub)
{
    geometry_msgs::PoseWithCovarianceStamped msg_poseinit;
    msg_poseinit.header.frame_id = "map";
    msg_poseinit.header.stamp = ros::Time::now(); 
    msg_poseinit.pose.pose.position.x = -0.0610;
    msg_poseinit.pose.pose.position.y = -0.128;
    msg_poseinit.pose.pose.position.z = 0.000;
    msg_poseinit.pose.pose.orientation.x = 0.000;
    msg_poseinit.pose.pose.orientation.y = 0.000;
    msg_poseinit.pose.pose.orientation.z = -0.049;
    msg_poseinit.pose.pose.orientation.w = 0.999;
    
    pub.publish(msg_poseinit);
    ros::Duration(1.0).sleep();
    pub.publish(msg_poseinit);
    ros::Duration(1.0).sleep();
    pub.publish(msg_poseinit);
    ros::Duration(1.0).sleep();
    going_goal_1 = true;
}

void setGoal(POSE pose,bool goal_point)
{
     //tell the action client that we want to spin a thread by default  
    MoveBaseClient ac("move_base", true);  
      
    //wait for the action server to come up  
    while(!ac.waitForServer(ros::Duration(5.0))){  
        ROS_WARN("Waiting for the move_base action server to come up");  
    }  
      
    move_base_msgs::MoveBaseGoal goal;  
      
    //we'll send a goal to the robot to move 1 meter forward  
    goal.target_pose.header.frame_id = "map";  
    goal.target_pose.header.stamp = ros::Time::now();  
   
    goal.target_pose.pose.position.x = pose.X; 
    goal.target_pose.pose.position.y = pose.Y;  
    goal.target_pose.pose.position.z = pose.Z;   
    goal.target_pose.pose.orientation.x = pose.or_x;
    goal.target_pose.pose.orientation.y = pose.or_y;
    goal.target_pose.pose.orientation.z = pose.or_z;
    goal.target_pose.pose.orientation.w = pose.or_w;   
    
    ROS_INFO("Sending goal");  
    
    ac.sendGoal(goal);  
      
    ac.waitForResult();  
      
    if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED) 
    {
        ROS_INFO("it is successful"); 
        goal_point = true;
    } 
       
     else  
     {
         ROS_ERROR("The base failed  move to goal!!!");
     }
          
}

void poseCallback(const std_msgs::String::ConstPtr &msg)
{
     ROS_INFO_STREAM("Topic is Subscriber ");
	 std::cout<<"get topic text: " << msg->data << std::endl;
     
     Callback_flag = true;
     msg_str = msg->data;
}   

int main(int argc, char** argv)
{  
  ros::init(argc, argv, "base_pose_control");  
  ros::NodeHandle nh;
  ros::Publisher pub_initialpose = nh.advertise<geometry_msgs::PoseWithCovarianceStamped>("/initialpose", 10);
  ros::Subscriber sub = nh.subscribe("/base/pose_topic",10,poseCallback);  

  //ros::Rate rate_loop(10);

  setHome(pub_initialpose);

      MoveBaseClient ac("move_base", true);  
      
    //wait for the action server to come up  
    while(!ac.waitForServer(ros::Duration(5.0))){  
        ROS_WARN("Waiting for the move_base action server to come up");  
    }  
  
 // setGoal(pose1);
  while(ros::ok())
  {
      cout<<"2222"<<endl;

     //tell the action client that we want to spin a thread by default  

      
    move_base_msgs::MoveBaseGoal goal;  
      
    //we'll send a goal to the robot to move 1 meter forward  
    goal.target_pose.header.frame_id = "map";  
    goal.target_pose.header.stamp = ros::Time::now();  
   
    goal.target_pose.pose.position.x = pose1.X; 
    goal.target_pose.pose.position.y = pose1.Y;  
    goal.target_pose.pose.position.z = pose1.Z;   
    goal.target_pose.pose.orientation.x = pose1.or_x;
    goal.target_pose.pose.orientation.y = pose1.or_y;
    goal.target_pose.pose.orientation.z = pose1.or_z;
    goal.target_pose.pose.orientation.w = pose1.or_w;   
    
    ROS_INFO("Sending goal");  
    
    ac.sendGoal(goal);  
      
    ac.waitForResult();  
      
    if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED) 
    {
        ROS_INFO("it is successful AAAAA"); 
    } 
     else  
     {
         ROS_ERROR("The base failed  move to goal  AAAA !!!");
     }

ros::Duration(1).sleep();
    //we'll send a goal to the robot to move 1 meter forward  
    goal.target_pose.header.frame_id = "map";  
    goal.target_pose.header.stamp = ros::Time::now();  
   
    goal.target_pose.pose.position.x = pose2.X; 
    goal.target_pose.pose.position.y = pose2.Y;  
    goal.target_pose.pose.position.z = pose2.Z;   
    goal.target_pose.pose.orientation.x = pose2.or_x;
    goal.target_pose.pose.orientation.y = pose2.or_y;
    goal.target_pose.pose.orientation.z = pose2.or_z;
    goal.target_pose.pose.orientation.w = pose2.or_w;   
    
    ROS_INFO("Sending goal");  
    
    ac.sendGoal(goal);  
      
    ac.waitForResult();  
      
    if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED) 
    {
        ROS_INFO("it is successful BBBBB"); 
    } 
     else  
     {
         ROS_ERROR("The base failed  move to goal  BBBBB !!!");
     }
ros::Duration(1).sleep();
        //we'll send a goal to the robot to move 1 meter forward  
    goal.target_pose.header.frame_id = "map";  
    goal.target_pose.header.stamp = ros::Time::now();  
   
    goal.target_pose.pose.position.x = pose3.X; 
    goal.target_pose.pose.position.y = pose3.Y;  
    goal.target_pose.pose.position.z = pose3.Z;   
    goal.target_pose.pose.orientation.x = pose3.or_x;
    goal.target_pose.pose.orientation.y = pose3.or_y;
    goal.target_pose.pose.orientation.z = pose3.or_z;
    goal.target_pose.pose.orientation.w = pose3.or_w;   
    
    ROS_INFO("Sending goal");  
    
    ac.sendGoal(goal);  
      
    ac.waitForResult();  
      
    if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED) 
    {
        ROS_INFO("it is successful AAAAA"); 
    } 
     else  
     {
         ROS_ERROR("The base failed  move to goal  AAAA !!!");
     }

ros::Duration(1).sleep();

      ros::spinOnce();
     // rate_loop.sleep();
  }
  

  return 0;  
}  
